from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from app.core.config import settings
from app.api.v1.endpoints import video_api, webhook
from app.db.base import Base, engine
import logging
import shutil
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def reset_app():
    """–û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if settings.MEDIA_DIR.exists():
        logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        for item in settings.MEDIA_DIR.iterdir():
            if item.is_file():
                item.unlink()
            elif item.is_dir():
                shutil.rmtree(item)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    settings.MEDIA_DIR.mkdir(exist_ok=True)
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üî® –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    
    logger.info("‚úÖ –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

# –°–±—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
if settings.DEBUG:
    reset_app()

app = FastAPI(title=settings.PROJECT_NAME)

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/media", StaticFiles(directory="media"), name="media")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
templates = Jinja2Templates(directory="templates")
templates.env.globals["settings"] = settings

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(video_api.router, prefix=settings.API_V1_STR)
app.include_router(webhook.router, prefix=settings.API_V1_STR)

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="127.0.0.1",
        port=8000,
        reload=settings.DEBUG
    )


# –¥–ª—è –ø–æ–¥—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É http://host.docker.internal:8000/api/v1/webhook/minio
# uvicorn main:app --host 0.0.0.0 --port 8000 --reload
# –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
# celery -A app.worker -b redis://localhost:6379/0 worker --loglevel=info --queues=download_queue --pool=solo

# # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
# celery -A app.worker -b redis://localhost:6379/0 worker --loglevel=info --queues=video_processing_queue --pool=solo

# # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
# celery -A app.utils.video_stream -b redis://localhost:6379/0 worker --loglevel=info --queues=video_stream_queue --pool=solo